
scanning/history
  latus.py improvements
    join main and scan_and_diff into something cleaner (or use change enum)
      use enum for change type?
    logging instead of printing
    logging passed to FileSystem
  
  implement FileHistoryStore
    add peerid to files.db
    
  implement FileChunkStore
    ChunkId(Record("hash", "loc", "size"))
    stores in db
    caches in memory
    get_status(chunkid)
    begin(chunk) -> token (probably time)
    cancel(chunkid, token)
    write(chunkid, data)
    read(chunkid) -> data  # ?    
    remove(chunkid)
  implement downloading algo
    def begin_fetch_write(chunkid):
      token = chunk_store.begin(chunkid)
      try:
        data = ** fetch **
      except:
        chunk_store.cancel(chunkid, token)
        ** handle error **
      else:
        chunk_store.write(chunkid, data)

    while chunk_queue:
      chunkid = chunk_queue.get()
      state = chunk_store.get_status(chunkid)
      if state == complete:
        pass  # great!
      elif state == inprogress
        inprogress_chunk_queue.put(chunkid)
      else:
        begin_fetch_write(chunkid)
    
    while inprogress_chunk_queue:
      chunkid = chunk_queue.get()
      if state == complete:
        pass  # great!
      else:  # even if in progress
        begin_fetch_write(chunkid)
        
      

overall:
  local fs->metadata working
    as daemon that runs all the time
  local fs->fs 2-way sync (merging)
    with two threads that commuicate with one another (two separate DBs)
    as daemon that runs all the time

  xmpp<->xmpp messages
  xmpp<->xmpp metadata syncing for one user
  p2p fs->fs 1-way sync for one user
  p2p fs<-fs 2-way sync# Copyright 2006 Uberan - All Rights Reserved

xmpp:
  send a custom message
  receive custom messages
  keep track of who is available
  spawn a gevent "thread" to talk to each one until unavailable
  p2p data (w/ SSL!)

concurency:
  try gevent first
  then try concurrence

improvements later
  after fetching and merging
    just let metadata scanner take care
    of updating history.  Only "inject" things when we resolve a conflict
    by using the local to win.
  add gropuid and security
  commit in chunks of 1,000 so files start syncing even while
    scanning the first time (which will take a long time)
  add file watchers (win32 and inotify for now)
  filter by Win32 attributes?


python
  relative imports
  new string formatting
  catch Exception as err
  io module
  binary literals
  class decorators
  run zips directly
  next(itr, default)
  new set methods
  collections.namedtuple
  collections.OrderedDict
  itertools product, combinations, etc
  logging.RotatingFileHandler
  os.walk w/ followLinks
  os.path.relpath
  os.path.expandvars: ~peter and %VAR%
  PriorityQueue
  json module
  plistlib module
  ssl
  dict comprehensions
  memoryview
  argparse module
  dictionary views
  collections.Counter
  Fraction
  unittest improvements assertAlmostEquals, assertItemsEqual, etc
  
